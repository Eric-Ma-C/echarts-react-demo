{"version":3,"sources":["Show.js","serviceWorker.js","index.js"],"names":["Show","itemStyle","normal","opacity","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","sizeFunction","x","schema","name","index","text","unit","option","baseOption","timeline","axisType","orient","autoPlay","inverse","playInterval","left","right","top","bottom","width","height","label","textStyle","color","emphasis","symbol","lineStyle","checkpointStyle","borderColor","borderWidth","controlStyle","showNextBtn","showPrevBtn","data","backgroundColor","title","textAlign","fontSize","fontWeight","tooltip","padding","formatter","obj","value","grid","containLabel","xAxis","type","max","nameGap","nameLocation","nameTextStyle","splitLine","show","axisLine","axisLabel","yAxis","visualMap","dimension","categories","cities","calculable","precision","textGap","inRange","colors","concat","series","symbolSize","val","animationDurationUpdate","animationEasingUpdate","options","n","length","push","id","this","getOption","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6bea5f4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport data from './data.json';\r\n\r\nclass Show extends React.Component {\r\n\r\n    getOption() {\r\n\r\n        var itemStyle = {\r\n            normal: {\r\n                opacity: 0.8,\r\n                shadowBlur: 10,\r\n                shadowOffsetX: 0,\r\n                shadowOffsetY: 0,\r\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n        };\r\n\r\n        var sizeFunction = function (x) {\r\n            var y = x/100;\r\n            return y;\r\n        };\r\n        // Schema:\r\n        var schema = [\r\n            {name: 'TotalAssets', index: 0, text: '房地产企业固定资产', unit: '亿元'},\r\n            {name: 'Sales', index: 1, text: '住宅销售额', unit: '亿元'},\r\n            {name: 'GDP', index: 2, text: '地区生产总值', unit: '亿元'},\r\n            {name: 'City', index: 3, text: '城市', unit: ''}\r\n        ];\r\n\r\n        var option = {\r\n            baseOption: {\r\n                timeline: {\r\n                    axisType: 'category',\r\n                    orient: 'vertical',\r\n                    autoPlay: true,\r\n                    inverse: true,\r\n                    playInterval: 1000,\r\n                    left: null,\r\n                    right: 0,\r\n                    top: 20,\r\n                    bottom: 20,\r\n                    width: 55,\r\n                    height: null,\r\n                    label: {\r\n                        normal: {\r\n                            textStyle: {\r\n                                color: '#999'\r\n                            }\r\n                        },\r\n                        emphasis: {\r\n                            textStyle: {\r\n                                color: '#fff'\r\n                            }\r\n                        }\r\n                    },\r\n                    symbol: 'none',\r\n                    lineStyle: {\r\n                        color: '#555'\r\n                    },\r\n                    checkpointStyle: {\r\n                        color: '#bbb',\r\n                        borderColor: '#777',\r\n                        borderWidth: 2\r\n                    },\r\n                    controlStyle: {\r\n                        showNextBtn: false,\r\n                        showPrevBtn: false,\r\n                        normal: {\r\n                            color: '#666',\r\n                            borderColor: '#666'\r\n                        },\r\n                        emphasis: {\r\n                            color: '#aaa',\r\n                            borderColor: '#aaa'\r\n                        }\r\n                    },\r\n                    data: []\r\n                },\r\n                backgroundColor: '#404a59',\r\n                title: [{\r\n                    text: data.timeline[0],\r\n                    textAlign: 'center',\r\n                    left: '63%',\r\n                    top: '55%',\r\n                    textStyle: {\r\n                        fontSize: 100,\r\n                        color: 'rgba(255, 255, 255, 0.7)'\r\n                    }\r\n                }, {\r\n                    text: '浙江省各市固定投资与GDP关系演变',\r\n                    left: 'center',\r\n                    top: 10,\r\n                    textStyle: {\r\n                        color: '#aaa',\r\n                        fontWeight: 'normal',\r\n                        fontSize: 20\r\n                    }\r\n                }],\r\n                tooltip: {\r\n                    padding: 5,\r\n                    backgroundColor: '#222',\r\n                    borderColor: '#777',\r\n                    borderWidth: 1,\r\n                    formatter: function (obj) {\r\n                        var value = obj.value;\r\n                        return schema[3].text + '：' + value[3] + '<br>'\r\n                            + schema[1].text + '：' + value[1] + schema[1].unit + '<br>'\r\n                            + schema[0].text + '：' + value[0] + schema[0].unit + '<br>'\r\n                            + schema[2].text + '：' + value[2] + '<br>';\r\n                    }\r\n                },\r\n                grid: {\r\n                    top: 100,\r\n                    containLabel: true,\r\n                    left: 30,\r\n                    right: '110'\r\n                },\r\n                xAxis: {\r\n                    type: 'log',\r\n                    name: '房地产企业固定资产',\r\n                    max: 400,\r\n                    nameGap: 25,\r\n                    nameLocation: 'middle',\r\n                    nameTextStyle: {\r\n                        fontSize: 18\r\n                    },\r\n                    splitLine: {\r\n                        show: false\r\n                    },\r\n                    axisLine: {\r\n                        lineStyle: {\r\n                            color: '#ccc'\r\n                        }\r\n                    },\r\n                    axisLabel: {\r\n                        formatter: '{value} 亿元'\r\n                    }\r\n                },\r\n                yAxis: {\r\n                    type: 'value',\r\n                    name: '住宅销售额',\r\n                    max: 3500,\r\n                    nameTextStyle: {\r\n                        color: '#ccc',\r\n                        fontSize: 18\r\n                    },\r\n                    axisLine: {\r\n                        lineStyle: {\r\n                            color: '#ccc'\r\n                        }\r\n                    },\r\n                    splitLine: {\r\n                        show: false\r\n                    },\r\n                    axisLabel: {\r\n                        formatter: '{value} 亿元'\r\n                    }\r\n                },\r\n                visualMap: [\r\n                    {\r\n                        show: false,\r\n                        dimension: 3,\r\n                        categories: data.cities,\r\n                        calculable: true,\r\n                        precision: 0.1,\r\n                        textGap: 30,\r\n                        textStyle: {\r\n                            color: '#ccc'\r\n                        },\r\n                        inRange: {\r\n                            color: (function () {\r\n                                var colors = ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68'];\r\n                                return colors.concat(colors);\r\n                            })()\r\n                        }\r\n                    }\r\n                ],\r\n                series: [\r\n                    {\r\n                        type: 'scatter',\r\n                        itemStyle: itemStyle,\r\n                        data: data.series[0],\r\n                        symbolSize: function (val) {\r\n                            return sizeFunction(val[2]);\r\n                        }\r\n                    }\r\n                ],\r\n                animationDurationUpdate: 1000,\r\n                animationEasingUpdate: 'quinticInOut'\r\n            },\r\n            options: []\r\n        };\r\n\r\n        for (var n = 0; n < data.timeline.length; n++) {\r\n            option.baseOption.timeline.data.push(data.timeline[n]);\r\n            option.options.push({\r\n                title: {\r\n                    show: true,\r\n                    'text': data.timeline[n] + ''\r\n                },\r\n                series: {\r\n                    name: data.timeline[n],\r\n                    type: 'scatter',\r\n                    itemStyle: itemStyle,\r\n                    data: data.series[n],\r\n                    symbolSize: function (val) {\r\n                        return sizeFunction(val[2]);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        return option;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"main\">\r\n                <ReactEcharts\r\n                    option={this.getOption()}\r\n                    style={{height: '700px', width: '100%'}}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Show;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Show from './Show';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Show />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}